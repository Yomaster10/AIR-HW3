diff a/assignment3.py b/assignment3.py	(rejected hunks)
@@ -42,51 +42,25 @@
 from MRS_236609.srv import GetCostmap
 ##
 
+# Global constants
 CUBE_EDGE = 0.5
 MAX_LINEAR_VELOCITY_FREE = 0.22 #[m/s]
 MAX_LINEAR_VELOCITY_HOLDING = 0.15 #[m/s]
 
-"""
-def euler_from_quaternion(quaternion):
-    q0, q1, q2, q3 = quaternion
-    roll = np.arctan2(2 * (q0 * q1 + q2 * q3), 1 - 2 * (q1 ** 2 + q2 ** 2))
-    pitch = np.arcsin(2 * (q0 * q2 - q3 * q1))
-    yaw = np.arctan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 ** 2 + q3 ** 2))
-    return roll, pitch, yaw
-
-class Pose:
-    #x = None; y = None; yaw = None
-    def __init__(self):
-        self.x = 0
-        self.y = 0
-        self.yaw = 0
-
-    def update(self, data):
-        odom = data.pose.pose
-        self.x, self.y = odom.position.x, odom.position.y
-        self.yaw = euler_from_quaternion([odom.orientation.x, odom.orientation.z, odom.orientation.z, odom.orientation.w])[2]
-
-# save the turtlebot's place as global
-pose = Pose()
-"""
-
 class TurtleBot:
     def __init__(self):
         self.start_time = time.time()
+        self.current_ws = None
+        self.curr_loc = None
+        self.time = None
+        self.initial_position = None
 
         self.cmu = CostmapUpdater()
         rospy.Service('/initial_costmap', GetCostmap, self.get_costmap)
         
-        self.curr_loc = None
-        rospy.Subscriber('/odom', Odometry, callback=self.update_loc)
-
-        self.reward = None
-        rospy.Subscriber('/current_cost', String, callback=self.update_reward)
-
         self.action_client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
 
-        self.time = None
-        self.initial_position = None
+        rospy.Subscriber('/odom', Odometry, callback=self.update_loc)
         rospy.Subscriber('/initialpose', PoseWithCovarianceStamped, callback=self.set_initial_position)
         
         print("Waiting for an initial position...")
